// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: dataexchange.proto

package dataexchange

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArrowDataService_GetArrowData_FullMethodName  = "/dataexchange.ArrowDataService/GetArrowData"
	ArrowDataService_SendArrowData_FullMethodName = "/dataexchange.ArrowDataService/SendArrowData"
)

// ArrowDataServiceClient is the client API for ArrowDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArrowDataServiceClient interface {
	// Streaming response for efficient data transfer
	GetArrowData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ArrowData], error)
	// Accepts Arrow data and processes it
	SendArrowData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ArrowData, Ack], error)
}

type arrowDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArrowDataServiceClient(cc grpc.ClientConnInterface) ArrowDataServiceClient {
	return &arrowDataServiceClient{cc}
}

func (c *arrowDataServiceClient) GetArrowData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ArrowData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ArrowDataService_ServiceDesc.Streams[0], ArrowDataService_GetArrowData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, ArrowData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ArrowDataService_GetArrowDataClient = grpc.ServerStreamingClient[ArrowData]

func (c *arrowDataServiceClient) SendArrowData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ArrowData, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ArrowDataService_ServiceDesc.Streams[1], ArrowDataService_SendArrowData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ArrowData, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ArrowDataService_SendArrowDataClient = grpc.ClientStreamingClient[ArrowData, Ack]

// ArrowDataServiceServer is the server API for ArrowDataService service.
// All implementations must embed UnimplementedArrowDataServiceServer
// for forward compatibility.
type ArrowDataServiceServer interface {
	// Streaming response for efficient data transfer
	GetArrowData(*Empty, grpc.ServerStreamingServer[ArrowData]) error
	// Accepts Arrow data and processes it
	SendArrowData(grpc.ClientStreamingServer[ArrowData, Ack]) error
	mustEmbedUnimplementedArrowDataServiceServer()
}

// UnimplementedArrowDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArrowDataServiceServer struct{}

func (UnimplementedArrowDataServiceServer) GetArrowData(*Empty, grpc.ServerStreamingServer[ArrowData]) error {
	return status.Errorf(codes.Unimplemented, "method GetArrowData not implemented")
}
func (UnimplementedArrowDataServiceServer) SendArrowData(grpc.ClientStreamingServer[ArrowData, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method SendArrowData not implemented")
}
func (UnimplementedArrowDataServiceServer) mustEmbedUnimplementedArrowDataServiceServer() {}
func (UnimplementedArrowDataServiceServer) testEmbeddedByValue()                          {}

// UnsafeArrowDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArrowDataServiceServer will
// result in compilation errors.
type UnsafeArrowDataServiceServer interface {
	mustEmbedUnimplementedArrowDataServiceServer()
}

func RegisterArrowDataServiceServer(s grpc.ServiceRegistrar, srv ArrowDataServiceServer) {
	// If the following call pancis, it indicates UnimplementedArrowDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArrowDataService_ServiceDesc, srv)
}

func _ArrowDataService_GetArrowData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArrowDataServiceServer).GetArrowData(m, &grpc.GenericServerStream[Empty, ArrowData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ArrowDataService_GetArrowDataServer = grpc.ServerStreamingServer[ArrowData]

func _ArrowDataService_SendArrowData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArrowDataServiceServer).SendArrowData(&grpc.GenericServerStream[ArrowData, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ArrowDataService_SendArrowDataServer = grpc.ClientStreamingServer[ArrowData, Ack]

// ArrowDataService_ServiceDesc is the grpc.ServiceDesc for ArrowDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArrowDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dataexchange.ArrowDataService",
	HandlerType: (*ArrowDataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetArrowData",
			Handler:       _ArrowDataService_GetArrowData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendArrowData",
			Handler:       _ArrowDataService_SendArrowData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dataexchange.proto",
}
